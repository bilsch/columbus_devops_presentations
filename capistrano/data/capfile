require 'erb'

role :web_server
role :shell_server
role :ubuntu_server
role :redhat_server

server "bilsch.dyndns.org", :web_server, :shell_server, :ubuntu_server
server "gir.home.bilsch.org", :web_server, :redhat_server
server 'udooq.home.bilsch.org', :ubuntu_server
server 'pi.home.bilsch.org', :ubuntu_server
server '192.168.55.4', :redhat_server

@influxdb_host='127.0.0.1'
@influxdb_port='8086'
@influxdb_metrics_db_name='metrics'
@influxdb_grafana_user='grafana'
@influxdb_grafana_pass='grafana'

# Very simple routine to load a file and 'render' an erb template
# Returns rendered text or writes to a file on disk somewhere
def erb_render(infile,outfile=nil)
  begin
    content = ERB.new(File.read(infile)).result(binding)
    out = outfile.nil? ? StringIO.new : File.new(outfile, "w")
    out.write(content)
    out.seek 0
    return out
  rescue => e
    puts "Failed to render temlate: #{e.message}"
    exit 1
  end
end # erb_render

namespace :basics do

  desc "Runs date on all_hosts"
  task :date, :pty => true, :roles => [ :redhat_server, :ubuntu_server] do
    run "/bin/date"
  end
  
  desc "Checks if httpd is installed - only applies to redhat servers"
  task :httpd_installed, :roles => :redhat_server do
    installed_pkgs = (capture "rpm -qa").split("\n")
    puts "checking #{installed_pkgs.size} packages for httpd stuff"
    if installed_pkgs.include?("httpd")
      puts "Yup"
    else
      puts "Nope"
    end
  end
end # basics

namespace :admin do
  namespace :influxdb do

    desc "admin:influxdb:start"
    task :start, :hosts => "192.168.55.4" do
      sudo("/sbin/service influxdb start")
    end

    desc "admin:influxdb:stop"
    task :stop, :hosts => "192.168.55.4" do
      sudo("/sbin/service influxdb stop")
    end

  end # influxdb

  namespace :grafana do

    desc "admin:grafana:start"
    task :start, :hosts => "192.168.55.4" do
      run "cd grafana ; /home/vagrant/grafana/node_modules/.bin/grunt server &"
    end

    desc "admin:grafana:stop"
    task :stop, :hosts => "192.168.55.4" do
      puts "Well, there is no stop right now because I did not create an init script!"
      exit 1
    end

  end # influxdb
end # admin
namespace :deploy do
  namespace :influxdb do
    desc "deploy:influxdb"
    task :default, :hosts => "192.168.55.4" do
      # list of all things
      deploy.influxdb.install
    end

    task :install, :hosts => "192.168.55.4" do
      sudo "yum -y install http://s3.amazonaws.com/influxdb/influxdb-latest-1.x86_64.rpm"
    end

    task :configure, :hosts => "192.168.55.4" do
      # populate /etc/default/influxdb with some crud
      upload("configs/influxdb/influxdb-defaults", "/tmp/influxdb-defaults")
      sudo("mv /tmp/influxdb-defaults /etc/default/influxdb")

      # populate /opt/influxdb/shared/config.toml with some crud
      upload("configs/influxdb/config.toml", "/tmp/config.toml")
      sudo("mv /tmp/config.toml /opt/influxdb/shared/config.toml")
      sudo("chown influxdb:influxdb /opt/influxdb/shared/config.toml")
    end

  end # influxdb

  namespace :grafana do
    desc "deploy:grafana"
    task :default, :hosts => "192.168.55.4" do
      # list of all things
      deploy.grafana.install
    end

    desc "deploy:grafana:install"
    # Yes, this could be a lot easier but you get the idea ;)
    task :install, :hosts => "192.168.55.4" do
      sudo "yum -y install http://mirror.us.leaseweb.net/epel/6/i386/epel-release-6-8.noarch.rpm"
      sudo "yum -y install nodejs npm git nodejs-grunt"
      run "git clone https://github.com/grafana/grafana.git; cd grafana ; git checkout v1.9.1"
    end

    desc "deploy:grafana:config"
    task :config, :hosts => "192.168.55.4" do
      upload erb_render("configs/grafana/config.js.erb"), "grafana/src/config.js"
      run "cd grafana ; npm install; /home/vagrant/grafana/node_modules/.bin/grunt"

      # Create grafana user for metrics
      #   - note Escaping problem and I don't feel like fixing it
      run("curl -X POST 'http://localhost:8086/db/site_dev/users?u=root&p=root' -d '{\"name\": \"grafana\", \"grafana\": \"grafana user\"}'")
      run("curl -X POST 'http://localhost:8086/db?u=root&p=root' -d '{\"name\": \"grafana\"}'")
      run("curl -X POST 'http://localhost:8086/db?u=root&p=root' -d '{\"name\": \"metrics\"}'")
    end
  end # grafana
end # deploy
